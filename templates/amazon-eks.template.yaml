AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys an EKS cluster into an existing VPC (qs-1p7nknoi6)
Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  NodeAMIOS:
    AllowedValues:
      - Amazon-Linux-HVM
      - SUSE-SLES-15-HVM
    Default: Amazon-Linux-HVM
    Description: The Linux distribution for the AMI to be used for the node
      instances.
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), dots(.) and forward slash (/).
    Default: quickstart-amazon-eks/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), dots(.) and
      forward slash (/).
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Type: String
  AdditionalEKSAdminArns:
    Default: ""
    Type: CommaDelimitedList
  NodeInstanceType:
    Default: t3.medium
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    Type: String
  NumberOfNodes:
    Default: 3
    Type: Number
  MaxNumberOfNodes:
    Default: 3
    Type: Number
  NodeGroupName:
    Default: Default
    Type: String
  NodeVolumeSize:
    Default: 20
    Type: String
  LambdaZipsBucketName:
    Type: String
    Default: ''
  VPCID:
    Type: "AWS::EC2::VPC::Id"
  PublicSubnet1ID:
    Type: "AWS::EC2::Subnet::Id"
  PublicSubnet2ID:
    Type: "AWS::EC2::Subnet::Id"
  PublicSubnet3ID:
    Type: "AWS::EC2::Subnet::Id"
  PrivateSubnet1ID:
    Type: "AWS::EC2::Subnet::Id"
  PrivateSubnet2ID:
    Type: "AWS::EC2::Subnet::Id"
  PrivateSubnet3ID:
    Type: "AWS::EC2::Subnet::Id"
  EndpointPublicAccess:
    Type: String
    Default: "true"
    AllowedValues: [ "true", "false" ]
  EndpointPrivateAccess:
    Type: String
    Default: "false"
    AllowedValues: [ "true", "false" ]
  KubernetesVersion:
    Type: String
    AllowedValues: [ "1.12", "1.11", "1.10" ]
    Default: "1.12"
  ProvisionClusterAutoScaler:
    Type: String
    AllowedValues: [ "Enabled", "Disabled" ]
    Default: "Disabled"
  BootstrapArguments:
    Type: String
    Default: ""
  BastionOS:
    Type: String
    AllowedValues: [ "Amazon-Linux-HVM", "CentOS-7-HVM", "Ubuntu-Server-14.04-LTS-HVM", "Ubuntu-Server-16.04-LTS-HVM", "SUSE-SLES-15-HVM" ]
    Default: "Amazon-Linux-HVM"
  KubeConfigKmsContext:
    Type: String
    Default: "EKSQuickStart"
  ProvisionBastionHost:
    Type: String
    AllowedValues: [ "Enabled", "Disabled" ]
    Default: "Enabled"
  BastionBootstrapScript:
    Default: ""
    Type: String
  BastionInstanceType:
    Default: "t2.micro"
    Type: String
  BastionRootVolumeSize:
    Type: Number
    Default: 10
  BastionIAMRoleName:
    Type: String
    Default: ""
  BastionEnableTCPForwarding:
    Type: String
    Default: "false"
    AllowedValues: [ "true", "false" ]
  BastionEnableX11Forwarding:
    Type: String
    Default: "false"
    AllowedValues: [ "true", "false" ]
  BastionVariables:
    Type: String
    Default: ""
Conditions:
  CreateLambdaZipsBucket: !Equals [!Ref 'LambdaZipsBucketName', '']
  DefaultBastionBootstrap: !Equals [!Ref 'BastionBootstrapScript', '']
  EnableBastion: !Equals [!Ref 'ProvisionBastionHost', 'Enabled']
  CustomBastionRole: !Not [!Equals [!Ref 'BastionIAMRoleName', '']]
  AdditionalVars: !Not [!Equals [!Ref 'BastionVariables', '']]
  EnableClusterAutoScaler: !Equals [!Ref 'ProvisionClusterAutoScaler', 'Enabled']
Resources:
  BastionStack:
    Condition: EnableBastion
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-linux-bastion/templates/linux-bastion.template'
      Parameters:
        VPCID: !Ref VPCID
        PublicSubnet1ID: !Ref PublicSubnet1ID
        PublicSubnet2ID: !Ref PublicSubnet2ID
        KeyPairName: !Ref KeyPairName
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Sub '${QSS3KeyPrefix}submodules/quickstart-linux-bastion/'
        RemoteAccessCIDR: !Ref RemoteAccessCIDR
        BastionInstanceType: !Ref BastionInstanceType
        RootVolumeSize: !Ref BastionRootVolumeSize
        AlternativeInitializationScript: !If
          - DefaultBastionBootstrap
          - !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/bastion_bootstrap.sh'
          - !Ref BastionBootstrapScript
        AlternativeIAMRole: !If [CustomBastionRole, !Ref BastionIAMRoleName, !GetAtt IamStack.Outputs.BastionRole]
        BastionAMIOS: !Ref BastionOS
        EnableTCPForwarding: !Ref BastionEnableTCPForwarding
        EnableX11Forwarding: !Ref BastionEnableX11Forwarding
        EnvironmentVariables: !Sub
        - >
          K8S_ROLE_ARN=${IamStack.Outputs.ControlPlaneProvisionRoleArn},
          K8S_CLUSTER_NAME=${EKSControlPlane.EKSName},
          K8S_CA_DATA=${EKSControlPlane.CAData},
          K8S_ENDPOINT=${EKSControlPlane.EKSEndpoint}${Joiner}
          ${BastionVariables}
        - Joiner: !If [AdditionalVars, ",", ""]
  NodeGroupStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/amazon-eks-nodegroup.template.yaml'
      Parameters:
        KeyPairName: !Ref 'KeyPairName'
        NodeAMIOS: !Ref NodeAMIOS
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !Ref PrivateSubnet2ID
        PrivateSubnet3ID: !Ref PrivateSubnet3ID
        VPCID: !Ref VPCID
        NodeInstanceType: !Ref NodeInstanceType
        NumberOfNodes: !Ref NumberOfNodes
        MaxNumberOfNodes: !Ref MaxNumberOfNodes
        NodeGroupName: !Ref NodeGroupName
        NodeVolumeSize: !Ref NodeVolumeSize
        EKSControlPlane: !GetAtt EKSControlPlane.EKSName
        ControlPlaneSecurityGroup: !Ref ControlPlaneSecurityGroup
        NodeInstanceProfile: !GetAtt IamStack.Outputs.NodeInstanceProfile
        NodeInstanceRoleName: !GetAtt IamStack.Outputs.NodeInstanceRoleName
        KubernetesVersion: !Ref KubernetesVersion
        BootstrapArguments: !Ref BootstrapArguments
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
  BastionSShToNodes:
    Condition: EnableBastion
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow SSH from Bastion server to Nodes
      GroupId: !GetAtt NodeGroupStack.Outputs.EKSNodeSecurityGroup
      SourceSecurityGroupId: !GetAtt BastionStack.Outputs.BastionSecurityGroupID
      IpProtocol: tcp
      ToPort: 22
      FromPort: 22
  BastionToAPIServerAccess:
    Condition: EnableBastion
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow Bastion server to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !GetAtt BastionStack.Outputs.BastionSecurityGroupID
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  IamStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/amazon-eks-iam.template.yaml'
      Parameters:
        LambdaZipsBucketName: !If [ CreateLambdaZipsBucket, !Ref LambdaZipsBucket, !Ref LambdaZipsBucketName ]
        DeleteLambdaZipsBucketContents: !If [ CreateLambdaZipsBucket, "True", "False" ]
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        KubeConfigBucket: !Ref KubeConfigBucket
        CreateBastionRole: !If [CustomBastionRole, "Disabled", !If [EnableBastion, "Enabled", "Disabled"]]
  FunctionStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/amazon-eks-functions.template.yaml'
      Parameters:
        LambdaZipsBucketName: !If [ CreateLambdaZipsBucket, !Ref LambdaZipsBucket, !Ref LambdaZipsBucketName ]
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        CopyZipsRoleArn: !GetAtt IamStack.Outputs.CopyZipsRoleArn
        EKSProvisionRoleArn: !GetAtt IamStack.Outputs.ControlPlaneProvisionRoleArn
        ControlPlaneSecurityGroup: !Ref ControlPlaneSecurityGroup
        EKSSubnetIds: !Sub "${PrivateSubnet1ID},${PrivateSubnet2ID},${PrivateSubnet3ID}"
        DeleteBucketContentsRoleArn: !GetAtt IamStack.Outputs.DeleteBucketContentsRoleArn
        QuickStartStackMakerRoleArn: !GetAtt IamStack.Outputs.QuickStartStackMakerRoleArn
        LambdaCleanUpFunctionRoleArn: !GetAtt IamStack.Outputs.LambdaCleanUpFunctionRoleArn
        DeleteLambdaZipsBucketContents: !If [ CreateLambdaZipsBucket, "True", "False" ]
        VPCID: !Ref VPCID
        KubeConfigUploadRoleArn: !GetAtt IamStack.Outputs.KubeConfigUploadRoleArn
        CleanupLoadBalancersRoleArn: !GetAtt IamStack.Outputs.CleanupLoadBalancersRoleArn
        CleanupSecurityGroupDependenciesRoleArn: !GetAtt IamStack.Outputs.CleanupSecurityGroupDependenciesRoleArn
  ClusterAutoScalerStack:
    Condition: EnableClusterAutoScaler
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/amazon-eks-cluster-autoscaler.template.yaml'
      Parameters:
        HelmLambdaArn: !GetAtt FunctionStack.Outputs.HelmLambdaArn
        KubeConfigPath: !Sub "s3://${KubeConfigBucket}/.kube/config.enc"
        KubeConfigKmsContext: !Ref KubeConfigKmsContext
        NodeInstanceRoleName: !GetAtt IamStack.Outputs.NodeInstanceRoleName
        NodeAutoScalingGroup: !GetAtt NodeGroupStack.Outputs.NodeAutoScalingGroup
        EksClusterName: !GetAtt EKSControlPlane.EKSName
        KubernetesVersion: !Ref KubernetesVersion
  LambdaZipsBucket:
    Type: AWS::S3::Bucket
    Condition: CreateLambdaZipsBucket
  DeleteBucketContents:
    Condition: CreateLambdaZipsBucket
    Type: Custom::DeleteBucketContents
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'FunctionStack.Outputs.DeleteBucketContentsLambdaArn'
      OutputBucket: !Ref 'LambdaZipsBucket'
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication
      VpcId: !Ref VPCID
  EKSControlPlane:
    Type: "Custom::CfnStackAssumeRole"
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt FunctionStack.Outputs.QuickStartStackMakerLambdaArn
      RoleArn: !GetAtt IamStack.Outputs.ControlPlaneProvisionRoleArn
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/amazon-eks-controlplane.template.yaml'
      ParentStackId: !Ref AWS::StackId
      CfnParameters:
        SecurityGroupIds: !Ref ControlPlaneSecurityGroup
        SubnetIds: !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID, !Ref PublicSubnet1ID, !Ref PublicSubnet2ID, !Ref PublicSubnet3ID ]]
        EndpointPublicAccess: !Ref EndpointPublicAccess
        EndpointPrivateAccess: !Ref EndpointPrivateAccess
        RoleArn: !GetAtt IamStack.Outputs.ControlPlaneRoleArn
        NodeInstanceRoleArn: !GetAtt IamStack.Outputs.NodeInstanceRoleArn
        KubeManifestLambdaArn: !GetAtt FunctionStack.Outputs.KubeManifestLambdaArn
        KmsKeyArn: !GetAtt KmsKey.Arn
        KubeConfigUploadRoleArn: !GetAtt IamStack.Outputs.KubeConfigUploadRoleArn
        KubeConfigUploadLambdaArn: !GetAtt FunctionStack.Outputs.KubeConfigUploadLambdaArn
        KubeConfigS3Bucket: !Ref KubeConfigBucket
        AdditionalEKSAdminArns: !Join [ ",", !Ref AdditionalEKSAdminArns ]
        KubernetesVersion: !Ref KubernetesVersion
        KmsContext: !Ref KubeConfigKmsContext
        CleanupLoadBalancersLambdaArn: !GetAtt FunctionStack.Outputs.CleanupLoadBalancersLambdaArn
  KmsKey:
    Type: "AWS::KMS::Key"
    Properties:
      KeyPolicy: {
        "Version": "2012-10-17",
        "Id": "key-default-1",
        "Statement": [
        {
          "Sid": "root access",
          "Effect": "Allow",
          "Principal": {"AWS": !Sub "arn:aws:iam::${AWS::AccountId}:root"},
          "Action": "kms:*",
          "Resource": "*"
        },
        {
          "Sid": "lambda encrypt",
          "Effect": "Allow",
          "Principal": {"AWS": !GetAtt IamStack.Outputs.KubeConfigUploadRoleArn},
          "Action": "kms:encrypt",
          "Resource": "*"
        },
        {
          "Sid": "lambda decrypt",
          "Effect": "Allow",
          "Principal": {"AWS": !GetAtt IamStack.Outputs.ControlPlaneProvisionRoleArn},
          "Action": "kms:decrypt",
          "Resource": "*"
        }
        ]
      }
  KubeConfigBucket:
    Type: "AWS::S3::Bucket"
Outputs:
  KubeConfigPath:
    Value: !Sub "s3://${KubeConfigBucket}/.kube/config.enc"
  HelmLambdaArn:
    Value: !GetAtt FunctionStack.Outputs.HelmLambdaArn
  KubeManifestLambdaArn:
    Value: !GetAtt FunctionStack.Outputs.KubeManifestLambdaArn
  KubeGetLambdaArn:
    Value: !GetAtt FunctionStack.Outputs.KubeGetLambdaArn
  BastionIP:
    Value: !If
      - EnableBastion
      - !GetAtt BastionStack.Outputs.EIP1
      - ""
  BastionSecurityGroup:
    Value: !If
      - EnableBastion
      - !GetAtt BastionStack.Outputs.BastionSecurityGroupID
      - ""
  BastionAutoScalingGroup:
    Value: !If
      - EnableBastion
      - !GetAtt BastionStack.Outputs.BastionAutoScalingGroup
      - ""
  EKSClusterName:
    Value: !GetAtt EKSControlPlane.EKSName
  NodeInstanceProfile:
    Value: !GetAtt IamStack.Outputs.NodeInstanceProfile
  NodeInstanceRoleName:
    Value: !GetAtt IamStack.Outputs.NodeInstanceRoleName
  ControlPlaneSecurityGroup:
    Value: !GetAtt ControlPlaneSecurityGroup.GroupId
  NodeGroupSecurityGroup:
    Value: !GetAtt NodeGroupStack.Outputs.EKSNodeSecurityGroup
  NodeInstanceRoleArn:
    Value: !GetAtt IamStack.Outputs.NodeInstanceRoleArn
  CleanupSecurityGroupDependenciesLambdaArn:
    Value: !GetAtt FunctionStack.Outputs.CleanupSecurityGroupDependenciesLambdaArn